---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Alana (PID: A16738319)"
format: pdf
editor: visual
---


The data for today's lab comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014)


```{r}
library("DESeq2")
```

## Import Data 

We need two things for this analysis: counts and metadata these are called "countData" and "colData" 

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

The counts are organized with a gene per row and experient per column. 

```{r}
head(metadata)
```

## Examine Data 

```{r}
# Complete the missing code
#counts <- read.csv("___", row.names=1)
#metadata <-  ___("airway_metadata.csv")
```


> Q1. How many genes are in this dataset? 38694

```{r}
nrow(counts)
```

> Q2. How many ‘control’ cell lines do we have? 4

```{r}
sum(metadata$dex == "control")
```

```{r}
table(metadata$dex)
```


## Check on match of metadata and coldata

```{r}
colnames(counts)
```


```{r}
metadata$id
```

```{r}
colnames(counts) == metadata$id
```

If you want to knoe that all the elements of a vector are TRUE we can use the `all()` function.

```{r}
all(c(T,T,T))
```

```{r}
all(c(T,T,F))
```

```{r}
all(colnames(counts) == metadata$id)
```


## Analysis 

I want to start by comparing "control" and "treated" columns. To this I will find the average or each gene (row) in all "control" columns. Then I will find the average in the "treated" columns. Then I will compare them,.

Let's extract all "control" columns first.

```{r}
control.inds <- metadata$dex == "control"
```

```{r}
control.counts <- counts[,control.inds]
```


Now find the mean count value per gene using the `apply()` function. 

```{r}
#| message: false
control.mean <- apply(control.counts, 1 , mean)
head(control.mean)
```

Let's extract all "treated" columns next.

```{r}
treated.mean <- apply(counts[, metadata$dex == "treated"],1 , mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```


Let's have a look with a quick plot. 

```{r}
plot(meancounts)
```


```{r}
plot(meancounts, log="xy")
```

```{r}
log(10, base=2)
```

```{r}
log2(10/10)
```

```{r}
log2(20/10)
```

```{r}
log2(10/20)
```

```{r}
log2(40/10)
```


We most often work in log2 units because they have a more intuitive interpretation.

Here we calculate the log2 Fold-change of treated/control values and add it to our nee data from of results. 

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```

There are some weird answers in here like NaN (Not a number) and -Inf (minus infinity) that all come because I have zero count genes in my data set.

It is common practice to filter these zero count genes out before we go too deep. 

```{r}
to.keep.inds <- (rowSums(meancounts[,1:2] == 0) == 0)

mycounts <- meancounts[to.keep.inds, ]
head(mycounts)
```



> Q. How many genes do we have left after zero count filtering? 

```{r}
nrow(mycounts)
```

A common threshold for calling a gene "up" or "down" is a log2 fold change of +2 or -2. 
> Q. How many "up" regulated genes do we have? 314 genes

```{r}
sum(mycounts$log2fc >= +2)
```

```{r}
sum(mycounts$log2fc >= -2)
```


## DESeq analysis 

We need to do this analysis properly with our inner stats person kept happy. We need the stats. 

```{r}
#| message: false
library(DESeq2)
```

To use DESeq we need to get our input data in a very particular format. 

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```

Run SEQeq analysis
```{r}
dds <- DESeq(dds)
```



Get the results
```{r}
res <-results(dds)
head(res)
```


I want to make a figure showing an overview of all my results to date. 
A plot of **log2 fold change** vs **p-value** (adjusted p-value)

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=-2, col= "grey")
abline(v=+2, col= "grey")
abline(h=-log(0.05), col= "grey")
```


```{r}
log(0.5)
log(0.000005)
```

smaller p values = higher -(minus) value


```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```


## Add annotation data 

We want to add on gene symbols (i.e gene names) as well as other common identifiers from major databases for all our genes of interest. 


```{r}
library("AnnotationDbi")
```


```{r}
library("org.Hs.eg.db")
```


```{r}
columns(org.Hs.eg.db)
```


```{r}
head(res)
```


My IDs are in the `rownames(res)` and they are from ENSEMBL
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                keys=rownames(res),
                keytype="ENSEMBL",        # The format of our genenames
                column="SYMBOL",          # The new format we want to add
                multiVals="first")
head(res)
```


```{r}
 #rownames(res)
```

We also want "GENENAME" and "ENTREZID" 

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                keys=rownames(res),
                keytype="ENSEMBL",        # The format of our genenames
                column="GENENAME",          # The new format we want to add
                multiVals="first")
head(res)
```

```{r}
res$entrezid <- mapIds(org.Hs.eg.db,
                keys=rownames(res),
                keytype="ENSEMBL",        # The format of our genenames
                column="ENTREZID",          # The new format we want to add
                multiVals="first")
head(res)
```

Let's save our results to a new CSV file

```{r}
write.csv(res,file="myresults.csv")
```

## Pathway Analysis 

Here we will use the "gage" package to do some pathway analysis (a.k.a geneset enrichment)

```{r}
library(pathview)
library(gage)
library(gageData)
```

Have a look at KEGG data 
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```


To run gage we need to provide it with a vector of fold-chain values (not our big full results table).

```{r}
foldchanges <- res$log2FoldChange
head(foldchanges)
```

Add the ENTREZ ids as names to this vector. 

```{r}
names(foldchanges) <- res$entrezid
head(foldchanges)
```


Now run **gage** with this input and the KEGG pathways

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```

Let's have a look at the hsa05310 Asthma pathway with our genes highlighted using the `pathview()` function: 

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)
